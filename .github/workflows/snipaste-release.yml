name: Snipaste Auto Release

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点运行
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Get latest release version
        id: get_latest_release
        run: |
          response=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          if echo "$response" | jq -e '.tag_name' > /dev/null; then
            LATEST_RELEASE=$(echo "$response" | jq -r '.tag_name')
          else
            LATEST_RELEASE="0.0"
          fi
          echo "Latest release: $LATEST_RELEASE"
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Check for new version and download files
        id: check_version
        run: |
          declare -A urls=(
            ["win-x64"]="https://dl.snipaste.com/win-x64"
            ["win-x86"]="https://dl.snipaste.com/win-x86"
            ["mac"]="https://dl.snipaste.com/mac"
            ["linux"]="https://dl.snipaste.com/linux"
          )
          
          mkdir -p snipaste_files
          > file_list.txt
          > version_list.txt
          
          # 遍历所有平台下载文件
          for platform in "${!urls[@]}"; do
            # 获取当前平台的URL（修复变量引用错误）
            current_url="${urls[$platform]}"
            echo "===== 开始下载 $platform ====="
            echo "使用URL: $current_url"
            
            # 获取最终重定向的URL
            echo "获取最终下载地址..."
            final_url=$(curl -sIL -o /dev/null -w "%{url_effective}" "$current_url")
            if [ -z "$final_url" ] || [ "$final_url" = "$current_url" ]; then
              echo "Error: 无法获取有效的重定向URL，可能链接失效"
              exit 1
            fi
            echo "最终下载地址: $final_url"
            filename=$(basename "$final_url")
            
            # 下载文件（使用正确的当前URL）
            echo "开始下载文件: $filename..."
            if ! curl -L -o "snipaste_files/$filename" "$current_url"; then
              echo "Error: curl下载失败，错误代码: $?"
              exit 1
            fi
            
            # 验证文件
            if [ ! -f "snipaste_files/$filename" ]; then
              echo "Error: 文件未找到: snipaste_files/$filename"
              exit 1
            fi
            if [ ! -s "snipaste_files/$filename" ]; then
              echo "Error: 文件为空: snipaste_files/$filename"
              exit 1
            fi
            echo "下载成功，文件大小: $(du -h "snipaste_files/$filename" | cut -f1)"
            
            # 提取版本号
            version=$(echo "$filename" | sed -E 's/^Snipaste-([0-9]+\.[0-9]+(\.[0-9]+)?).*$/\1/')
            if ! echo "$version" | grep -qE '^[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
              echo "Error: 无法从文件名提取版本号: $filename"
              exit 1
            fi
            echo "提取的版本号: $version"
            
            # 记录文件和版本
            echo "$filename" >> file_list.txt
            echo "$version" >> version_list.txt
          done
          
          # 验证版本一致性
          version_list=$(sort -u version_list.txt)
          version_count=$(echo "$version_list" | wc -l | tr -d '[:space:]')
          if [ "$version_count" -ne 1 ]; then
            echo "Error: 版本不一致: $version_list"
            exit 1
          fi
          NEW_VERSION=$(echo "$version_list" | head -n 1 | tr -d '[:space:]')
          echo "确认版本号: $NEW_VERSION"
          
          # 准备文件列表
          files_to_upload=$(cat file_list.txt | while read -r file; do echo "snipaste_files/$file"; done | tr '\n' ' ')
          echo "待上传文件: $files_to_upload"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "files_to_upload=$files_to_upload" >> $GITHUB_OUTPUT

      - name: Create release with assets
        if: steps.check_version.outputs.new_version != steps.get_latest_release.outputs.latest_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check_version.outputs.new_version }}
          name: Snipaste ${{ steps.check_version.outputs.new_version }}
          body: |
            Auto-released version ${{ steps.check_version.outputs.new_version }}
            Contains builds for:
            - Windows x64
            - Windows x86
            - macOS
            - Linux
          files: ${{ steps.check_version.outputs.files_to_upload }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
