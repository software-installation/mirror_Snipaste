name: Snipaste Auto Release

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点运行
  workflow_dispatch:  # 允许手动触发

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Get latest release version
        id: get_latest_release
        run: |
          # 获取最新Release版本号，处理仓库无Release的情况
          response=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          if echo "$response" | jq -e '.tag_name' > /dev/null; then
            LATEST_RELEASE=$(echo "$response" | jq -r '.tag_name')
          else
            LATEST_RELEASE="0.0"
          fi
          echo "Latest release: $LATEST_RELEASE"
          echo "latest_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT

      - name: Check for new version and download files
        id: check_version
        run: |
          # 定义下载链接和对应平台
          declare -A urls=(
            ["win-x64"]="https://dl.snipaste.com/win-x64"
            ["win-x86"]="https://dl.snipaste.com/win-x86"
            ["mac"]="https://dl.snipaste.com/mac"
            ["linux"]="https://dl.snipaste.com/linux"
          )
          
          mkdir -p snipaste_files
          touch versions.txt filenames.txt
          
          # 下载文件并提取版本号
          for platform in "${!urls[@]}"; do
            echo "Downloading $platform..."
            # 获取最终重定向URL
            final_url=$(curl -sIL -o /dev/null -w "%{url_effective}" "${urls[$platform]}")
            filename=$(basename "$final_url")
            # 下载文件
            curl -L -o "snipaste_files/$filename" "${urls[$platform]}"
            
            echo "Downloaded file: $filename"
            
            # 提取版本号
            version=$(echo "$filename" | sed -E 's/^Snipaste-([0-9]+\.[0-9]+(\.[0-9]+)?).*$/\1/')
            
            # 验证版本号格式
            if ! echo "$version" | grep -qE '^[0-9]+\.[0-9]+(\.[0-9]+)?$'; then
              echo "Error: 无法从文件名 $filename 中提取有效版本号"
              exit 1
            fi
            
            echo "Extracted version for $platform: $version"
            echo "$platform_version=$version" >> versions.txt
            echo "$platform_filename=$filename" >> filenames.txt
          done
          
          # 检查所有平台版本是否一致
          version_list=$(awk -F'=' '/_version/ {print $2}' versions.txt | sort -u)
          version_count=$(echo "$version_list" | wc -l)
          
          if [ "$version_count" -ne 1 ]; then
            echo "Error: 各平台版本号不一致！"
            echo "检测到的版本号: $version_list"
            exit 1
          fi
          
          # 确保正确提取新版本号
          NEW_VERSION=$(echo "$version_list" | head -n 1 | tr -d '[:space:]')
          if [ -z "$NEW_VERSION" ]; then
            echo "Error: 未能提取有效的新版本号"
            exit 1
          fi
          
          echo "Detected version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # 收集所有文件名用于上传
          files_to_upload=$(awk -F'=' '/_filename/ {print "snipaste_files/" $2}' filenames.txt | tr '\n' ' ' | sed 's/ $//')
          echo "files=$files_to_upload" >> $GITHUB_OUTPUT

      - name: Create release if new version
        if: steps.check_version.outputs.new_version != steps.get_latest_release.outputs.latest_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.check_version.outputs.new_version }}
          name: Snipaste ${{ steps.check_version.outputs.new_version }}
          body: |
            Auto-released version ${{ steps.check_version.outputs.new_version }}
            Contains builds for:
            - Windows x64
            - Windows x86
            - macOS
            - Linux
          files: ${{ steps.check_version.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
